
#================================= 
#预处理 
#================================= 
#include "..." 
snippet xINC 
#include "${1:TODO}"${2} 
endsnippet 
# #include <...> 
snippet xinc 
#include <${1:TODO}>${2} 
endsnippet 


snippet xmyheader
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
${1}
endsnippet

snippet xall
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>

int main(int argc, const char* argv[])
{
	${1}
	return 0;
}
endsnippet

snippet xbuf
char ${1}[${2}] = {0};
endsnippet

#sockaddr_in
snippet xsockaddr_in
struct sockaddr_in ${1}
endsnippet

# main
snippet xmain
int main(int argc, const char* argv[])
{
	${0}
	return 0;
}
endsnippet

# libevent event callback
snippet xeventcallback
void ${1}(evutil_socket_t fd, short what, void *arg)
{
	${2}
}
${3}
endsnippet

# libevent bufferevent listen callback
snippet xlistencallback
void ${1}(
		struct evconnlistener *listener, 
		evutil_socket_t fd, 
		struct sockaddr *addr, 
		int len, void *ptr)
{
	${2}
}
${3}
endsnippet

# libevent read and write callback
snippet xbread_write_callback
void ${1}(struct bufferevent *bev, void *arg)
{
	${2}
}
${3}
endsnippet

# libevent read and write callback
snippet xbevent_callback
void ${1}(struct bufferevent *bev, short events, void *arg)
{
	if (events & BEV_EVENT_EOF)
	{
		printf("connection closed\n");  
	}
	else if(events & BEV_EVENT_ERROR)   
	{
		printf("some other error\n");
	}
	${2}
}
${3}
endsnippet

#main(void)
snippet xmainnon
int main(void)
{
	${0}
	return 0;
}
endsnippet

# main args
snippet xargc
if(argc < ${1})
{   
	printf("eg: ./a.out ${2}\n");
	exit(1);
}
${3}
endsnippet
#xxx
snippet xxx
/*
 * ${0}
 */
endsnippet

#ErrorPrint
snippet xerror
if(${1}== -1)
{
	perror("${2} error");
	exit(1);
}
${3}
endsnippet

#disconnect
snippet xclose
else if(${1} == 0)
{
	printf("客户端已经断开了连接~~~~(>_<)~~~~\n");
	${2}
}
${3}
endsnippet

#ip and port information
snippet xipport
char ip[64] = {0};
printf("New Client IP: %s, Port: %d\n",
	inet_ntop(AF_INET, &client_addr.sin_addr.s_addr, ip, sizeof(ip)),
	ntohs(client_addr.sin_port));
${1}
endsnippet
#================================= 
#结构语句 
#================================= 
# if 
snippet if 
if (${1:/* condition */}) 
{ 
    ${2:TODO} 
} 
endsnippet 
# else if 
snippet ei 
else if (${1:/* condition */}) 
{ 
    ${2:TODO} 
} 
endsnippet 
# else 
snippet el 
else 
{ 
    ${1:TODO} 
} 
endsnippet 
# return 
snippet re 
return(${1:/* condition */}); 
endsnippet 
# Do While Loop 
snippet do 
do 
{ 
    ${2:TODO} 
} while (${1:/* condition */}); 
endsnippet 
# While Loop 
snippet wh 
while (${1:/* condition */}) 
{ 
    ${2:TODO} 
} 
endsnippet 
# switch 
snippet sw 
switch (${1:/* condition */}) 
{ 
    case ${2:c}: 
	{ 
    } 
    break; 

    default: 
	{ 
    } 
    break; 
} 
endsnippet 
# 通过迭代器遍历容器（可读写） 
snippet for 
for (auto ${2:iter} = ${1:c}.begin(); ${3:$2} != $1.end(); ${4:++iter}) 
{
    ${5:TODO} 
} 
endsnippet 
# 通过迭代器遍历容器（只读） 
snippet cfor 
for (auto ${2:citer} = ${1:c}.cbegin(); ${3:$2} != $1.cend(); ${4:++citer}) 
{ 
    ${5:TODO} 
} 
endsnippet 
# 通过下标遍历容器 
snippet For 
for (decltype($1.size()) ${2:i} = 0; $2 != ${1}.size(); ${3:++}$2) 
{ 
    ${4:TODO} 
} 
endsnippet 
# C++11风格for循环遍历（可读写） 
snippet F 
for (auto& e : ${1:c}) 
{ 
} 
endsnippet 
# C++11风格for循环遍历（只读） 
snippet CF 
for (const auto& e : ${1:c}) 
{ 
} 
endsnippet 
# For Loop 
snippet FOR 
for (unsigned ${2:i} = 0; $2 < ${1:count}; ${3:++}$2) 
{ 
    ${4:TODO} 
} 
endsnippet 
# try-catch 
snippet try 
try { 
} catch (${1:/* condition */}) { 
} 
endsnippet 
snippet ca 
catch (${1:/* condition */}) { 
} 
endsnippet 
snippet throw 
th (${1:/* condition */}); 
endsnippet 
#================================= 
#容器 
#================================= 
# std::vector 
snippet vec 
vector<${1:char}>   v${2}; 
endsnippet 
# std::list 
snippet lst 
list<${1:char}> l${2}; 
endsnippet 
# std::set 
snippet set 
set<${1:key}>   s${2}; 
endsnippet 
# std::map 
snippet map 
map<${1:key}, ${2:value}>   m${3}; 
endsnippet 
#================================= 
#语言扩展 
#================================= 
# Class 
snippet cl 
class ${1:`Filename('$1_t', 'name')`} 
{ 
public: 
	$1 (); 
    virtual ~$1 (); 

private: 
}; 
endsnippet 
#================================= 
#结对符 
#================================= 
 # 括号 bracket 
snippet b "bracket" i 
(${1})${2} 
endsnippet 
# 方括号 square bracket，设定为 st 而非 sb，避免与 b 冲突
snippet st "square bracket" i 
[${1}]${2} 
endsnippet 
# 大括号 brace 
snippet br "brace" i 
{ 
	    ${1} 
}${2} 
endsnippet 
# 单引号 single quote，设定为 se 而非 sq，避免与 q 冲突
snippet se "single quote" I
'${1}'${2}
endsnippet
# 双引号 quote
snippet q "quote" I
"${1}"${2}
endsnippet
# 指针符号 arrow 
snippet ar "arrow" i 
->${1} 
endsnippet 
# dot 
snippet d "dot" i 
.${1} 
endsnippet 
# 作用域 scope 
snippet s "scope" i 
::${1} 
endsnippet

snippet xtcpcode
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <ctype.h>


int main(int argc, const char* argv[])
{
	if(argc < 2)
	{
		printf("eg: ./a.out port\n");
		exit(1);
	}
    struct sockaddr_in serv_addr;
    socklen_t serv_len = sizeof(serv_addr);
	int port = atoi(argv[1]);

    // 创建套接字
    int lfd = socket(AF_INET, SOCK_STREAM, 0);
    // 初始化服务器 sockaddr_in 
    memset(&serv_addr, 0, serv_len);
    serv_addr.sin_family = AF_INET;                   // 地址族 
    serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);    // 监听本机所有的IP
    serv_addr.sin_port = htons(port);            // 设置端口 
    // 绑定IP和端口
    bind(lfd, (struct sockaddr*)&serv_addr, serv_len);

    // 设置同时监听的最大个数
    listen(lfd, 36);
	printf("Start accept ......\n");

	struct sockaddr_in client_addr;
	socklen_t cli_len = sizeof(client_addr);
    while(1)
    {
		${1}    
    }

    close(lfd);
    return 0;
}
endsnippet

snippet xclientcode
#include <stdio.h>
#include <sys/socket.h>
#include <unistd.h>
#include <stdlib.h>
#include <arpa/inet.h>
#include <string.h>

#define SERV_IP "127.0.0.1"

int main(int argc, char* argv[])
{
    if(argc < 2)
    {
        printf("./a.out servPort\n");
        exit(1);
    }
    // 端口
    int port = strtol(argv[1], NULL, 10);
    int cfd = socket(AF_INET, SOCK_STREAM, 0);

    // 连接服务器
    struct sockaddr_in serv_addr;
    memset(&serv_addr, 0, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    inet_pton(AF_INET, SERV_IP, &serv_addr.sin_addr.s_addr);
    serv_addr.sin_port = htons(port);

    connect(cfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr));

    // 接收数据
    char buf[BUFSIZ];
    int len;
    while(1)
    {
		printf("\n请输入要发送的数据： \n");
        // 从键盘接受输入
        fgets(buf, sizeof(buf), stdin);
        // 发送数据给服务器
        write(cfd, buf, strlen(buf));

        // 接收服务器数据
        len = read(cfd, buf, sizeof(buf));
		printf("接收到的数据：\n");
        write(STDOUT_FILENO, buf, len);
    }

    close(cfd);
    return 0;
}
endsnippet
